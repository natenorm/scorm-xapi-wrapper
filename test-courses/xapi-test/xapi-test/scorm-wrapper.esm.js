class t{static findAPI(t){let i=null,e=0;try{for(;!t.API&&!t.API_1484_11&&t.parent&&t.parent!==t&&e<=500;)e++,t=t.parent;t.API_1484_11?i={type:"scorm2004",handle:t.API_1484_11}:t.API&&(i={type:"scorm12",handle:t.API})}catch(t){}return i}static detect(){let t=null;if(t=this.findAPI(window),!t&&window.parent&&window.parent!==window)try{t=this.findAPI(window.parent)}catch(t){}if(!t&&window.top&&window.top.opener)try{t=this.findAPI(window.top.opener)}catch(t){}if(!t&&window.top&&window.top.opener&&window.top.opener.document)try{t=this.findAPI(window.top.opener.document)}catch(t){}if(t)return{type:t.type,api:t.handle};const i=this.findXAPIConfig();return i?{type:"xapi",api:i}:{type:"local",api:null}}static findXAPIConfig(){const t=new URLSearchParams(window.location.search),i=t.get("endpoint"),e=t.get("auth"),r=t.get("actor"),a=t.get("activity_id");return i?{endpoint:i,auth:e,actor:r?JSON.parse(decodeURIComponent(r)):null,activityId:a}:window.xAPIConfig?window.xAPIConfig:null}}class i{constructor(t){this.api=t,this.initialized=!1}async initialize(){try{if("true"===this.api.Initialize("")){this.initialized=!0,this.clearLocalStorageData();const t=this.api.GetValue("cmi.completion_status");return"unknown"!==t&&"not attempted"!==t||(this.api.SetValue("cmi.completion_status","incomplete"),this.api.Commit("")),!0}throw new Error(this.getLastError())}catch(t){throw console.error("[SCORM 2004] Initialization error:",t),t}}clearLocalStorageData(){try{const t=[];for(let i=0;i<localStorage.length;i++){const e=localStorage.key(i);e&&e.startsWith("scorm")&&t.push(e)}t.forEach(t=>localStorage.removeItem(t))}catch(t){}}async saveProgress(t){if(!this.initialized)throw new Error("SCORM API not initialized");try{const i=JSON.stringify(t);i.length>64e3&&console.warn("[SCORM 2004] Data exceeds 64KB limit"),this.api.SetValue("cmi.suspend_data",i),void 0!==t.location&&this.api.SetValue("cmi.location",String(t.location));if("true"===this.api.Commit(""))return!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error saving progress:",t),!1}}async getProgress(){if(!this.initialized)throw new Error("SCORM API not initialized");try{const t=this.api.GetValue("cmi.suspend_data");return t&&""!==t?JSON.parse(t):null}catch(t){return console.error("[SCORM 2004] Error loading progress:",t),null}}async setComplete(t=!0){if(!this.initialized)throw new Error("SCORM API not initialized");try{if("completed"===this.api.GetValue("cmi.completion_status"))return!0;this.api.SetValue("cmi.completion_status","completed"),this.api.SetValue("cmi.success_status",t?"passed":"failed");if("true"===this.api.Commit(""))return!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error setting completion:",t),!1}}async setScore(t){if(!this.initialized)throw new Error("SCORM API not initialized");try{const i=t/100;this.api.SetValue("cmi.score.scaled",String(i)),this.api.SetValue("cmi.score.raw",String(t)),this.api.SetValue("cmi.score.min","0"),this.api.SetValue("cmi.score.max","100");if("true"===this.api.Commit(""))return!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error setting score:",t),!1}}async terminate(){if(!this.initialized)return!0;try{"completed"!==this.api.GetValue("cmi.completion_status")&&this.api.SetValue("cmi.exit","suspend"),this.api.Commit("");if("true"===this.api.Terminate(""))return this.initialized=!1,!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error terminating:",t),!1}}async setValue(t,i){if(!this.initialized)throw new Error("SCORM API not initialized");try{return this.api.SetValue(t,i),this.api.Commit(""),!0}catch(t){return console.error("[SCORM 2004] Error setting value:",t),!1}}async getValue(t){if(!this.initialized)throw new Error("SCORM API not initialized");try{return this.api.GetValue(t)}catch(t){return console.error("[SCORM 2004] Error getting value:",t),null}}getLastError(){const t=this.api.GetLastError();return`Error ${t}: ${this.api.GetErrorString(t)} - ${this.api.GetDiagnostic(t)}`}}class e{constructor(t){this.api=t,this.initialized=!1}async initialize(){try{if("true"===this.api.LMSInitialize("")){this.initialized=!0,console.log("[SCORM 1.2] Initialized successfully"),this.clearLocalStorageData();const t=this.api.LMSGetValue("cmi.core.lesson_status");return t&&""!==t&&"not attempted"!==t||(this.api.LMSSetValue("cmi.core.lesson_status","incomplete"),this.api.LMSCommit("")),!0}throw new Error("LMSInitialize failed")}catch(t){throw console.error("[SCORM 1.2] Initialization error:",t),t}}clearLocalStorageData(){try{const t=[];for(let i=0;i<localStorage.length;i++){const e=localStorage.key(i);e&&e.startsWith("scorm")&&t.push(e)}t.forEach(t=>localStorage.removeItem(t)),t.length>0&&console.log("[SCORM 1.2] Cleared local storage data")}catch(t){}}async saveProgress(t){if(!this.initialized)throw new Error("SCORM 1.2 API not initialized");try{const i=JSON.stringify(t);i.length>4096&&console.warn("[SCORM 1.2] Data exceeds 4KB limit"),this.api.LMSSetValue("cmi.suspend_data",i),void 0!==t.location&&this.api.LMSSetValue("cmi.core.lesson_location",String(t.location));return"true"===this.api.LMSCommit("")&&(console.log("[SCORM 1.2] Progress saved"),!0)}catch(t){return console.error("[SCORM 1.2] Error saving:",t),!1}}async getProgress(){if(!this.initialized)throw new Error("SCORM 1.2 API not initialized");try{const t=this.api.LMSGetValue("cmi.suspend_data");return t&&""!==t?JSON.parse(t):null}catch(t){return console.error("[SCORM 1.2] Error loading:",t),null}}async setComplete(t=!0){if(!this.initialized)throw new Error("SCORM 1.2 API not initialized");try{this.api.LMSSetValue("cmi.core.lesson_status",t?"passed":"failed");return"true"===this.api.LMSCommit("")&&(console.log("[SCORM 1.2] Course marked as "+(t?"passed":"failed")),!0)}catch(t){return console.error("[SCORM 1.2] Error setting completion:",t),!1}}async setScore(t){if(!this.initialized)throw new Error("SCORM 1.2] API not initialized");try{this.api.LMSSetValue("cmi.core.score.raw",String(t)),this.api.LMSSetValue("cmi.core.score.min","0"),this.api.LMSSetValue("cmi.core.score.max","100");return"true"===this.api.LMSCommit("")&&(console.log("[SCORM 1.2] Score set:",t),!0)}catch(t){return console.error("[SCORM 1.2] Error setting score:",t),!1}}async terminate(){if(!this.initialized)return!0;try{return"true"===this.api.LMSFinish("")&&(console.log("[SCORM 1.2] Terminated successfully"),this.initialized=!1,!0)}catch(t){return console.error("[SCORM 1.2] Error terminating:",t),!1}}async setValue(t,i){if(!this.initialized)throw new Error("SCORM 1.2 API not initialized");try{return this.api.LMSSetValue(t,i),this.api.LMSCommit(""),!0}catch(t){return!1}}async getValue(t){if(!this.initialized)throw new Error("SCORM 1.2 API not initialized");try{return this.api.LMSGetValue(t)}catch(t){return null}}}class r{constructor(){this.initialized=!1,this.config=null,this.activityId=null,this.registrationId=null}initialize(t){if(this.initialized)return!0;if(!t)throw new Error("xAPI config is required");return this.config={endpoint:t.endpoint||null,auth:t.auth||null,actor:t.actor||{name:"Test User",mbox:"mailto:test@example.com"},activityId:t.activityId||"http://example.com/activities/course",registration:t.registration||this.generateUUID()},this.activityId=this.config.activityId,this.registrationId=this.config.registration,this.config.endpoint&&this.config.auth?(console.log("[xAPI] Initializing with LRS:",this.config.endpoint),this.initialized=!0,!0):(console.log("[xAPI] Initializing in local mode (no LRS configured)"),this.initialized=!0,!0)}async sendStatement(t){if(!this.initialized)throw new Error("xAPI adapter not initialized");if(t.id||(t.id=this.generateUUID()),t.timestamp||(t.timestamp=(new Date).toISOString()),t.actor||(t.actor=this.config.actor),console.log("[xAPI] Statement:",t),!this.config.endpoint||!this.config.auth)return console.log("[xAPI] Local mode - statement logged (not sent to LRS)"),!0;try{const i=await fetch(`${this.config.endpoint}/statements`,{method:"POST",headers:{Authorization:this.config.auth,"Content-Type":"application/json","X-Experience-API-Version":"1.0.3"},body:JSON.stringify(t)});if(!i.ok)throw new Error(`LRS returned ${i.status}: ${i.statusText}`);return console.log("[xAPI] Statement sent successfully"),!0}catch(t){return console.error("[xAPI] Failed to send statement:",t),!1}}async saveProgress(t){if(!this.initialized)throw new Error("xAPI adapter not initialized");if(!this.config.endpoint||!this.config.auth)return this.saveToLocalStorage(t);try{const i=new URL(`${this.config.endpoint}/activities/state`);i.searchParams.append("activityId",this.activityId),i.searchParams.append("agent",JSON.stringify(this.config.actor)),i.searchParams.append("stateId","progress"),this.registrationId&&i.searchParams.append("registration",this.registrationId);const e=await fetch(i.toString(),{method:"PUT",headers:{Authorization:this.config.auth,"Content-Type":"application/json","X-Experience-API-Version":"1.0.3"},body:JSON.stringify(t)});if(!e.ok)throw new Error(`LRS returned ${e.status}: ${e.statusText}`);return console.log("[xAPI] State saved to LRS"),!0}catch(i){return console.error("[xAPI] Failed to save state:",i),this.saveToLocalStorage(t)}}async getProgress(){if(!this.initialized)throw new Error("xAPI adapter not initialized");if(!this.config.endpoint||!this.config.auth)return this.loadFromLocalStorage();try{const t=new URL(`${this.config.endpoint}/activities/state`);t.searchParams.append("activityId",this.activityId),t.searchParams.append("agent",JSON.stringify(this.config.actor)),t.searchParams.append("stateId","progress"),this.registrationId&&t.searchParams.append("registration",this.registrationId);const i=await fetch(t.toString(),{method:"GET",headers:{Authorization:this.config.auth,"X-Experience-API-Version":"1.0.3"}});if(404===i.status)return console.log("[xAPI] No saved state found in LRS"),{};if(!i.ok)throw new Error(`LRS returned ${i.status}: ${i.statusText}`);const e=await i.json();return console.log("[xAPI] State loaded from LRS:",e),e}catch(t){return console.error("[xAPI] Failed to load state:",t),this.loadFromLocalStorage()}}async setComplete(){const t={actor:this.config.actor,verb:{id:"http://adlnet.gov/expapi/verbs/completed",display:{"en-US":"completed"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}},context:{registration:this.registrationId}};return this.sendStatement(t)}async setScore(t,i=0,e=100){const r=(t-i)/(e-i),a={actor:this.config.actor,verb:{id:"http://adlnet.gov/expapi/verbs/scored",display:{"en-US":"scored"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}},result:{score:{scaled:r,raw:t,min:i,max:e}},context:{registration:this.registrationId}};return this.sendStatement(a)}async terminate(){if(!this.initialized)return!0;const t={actor:this.config.actor,verb:{id:"http://adlnet.gov/expapi/verbs/terminated",display:{"en-US":"terminated"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}},context:{registration:this.registrationId}};return await this.sendStatement(t),console.log("[xAPI] Terminated"),this.initialized=!1,!0}saveToLocalStorage(t){try{const i=`xapi_progress_${this.activityId}`;return localStorage.setItem(i,JSON.stringify(t)),console.log("[xAPI] State saved to localStorage"),!0}catch(t){return console.error("[xAPI] Failed to save to localStorage:",t),!1}}loadFromLocalStorage(){try{const t=`xapi_progress_${this.activityId}`,i=localStorage.getItem(t);if(i){const t=JSON.parse(i);return console.log("[xAPI] State loaded from localStorage:",t),t}return{}}catch(t){return console.error("[xAPI] Failed to load from localStorage:",t),{}}}generateUUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){const i=16*Math.random()|0;return("x"===t?i:3&i|8).toString(16)})}getConfig(){return this.config}isInitialized(){return this.initialized}}class a{constructor(){this.storageKey="scorm_local_data",this.initialized=!1}async initialize(){return console.log("[LocalStorage] Running in local development mode"),this.initialized=!0,this.clearOtherEnvironmentData(),!0}clearOtherEnvironmentData(){}async saveProgress(t){if(!this.initialized)throw new Error("Adapter not initialized");try{const i=JSON.stringify(t);return localStorage.setItem(this.storageKey,i),console.log("[LocalStorage] Progress saved:",t),!0}catch(t){return console.error("[LocalStorage] Error saving progress:",t),!1}}async getProgress(){if(!this.initialized)throw new Error("Adapter not initialized");try{const t=localStorage.getItem(this.storageKey);if(!t)return null;const i=JSON.parse(t);return console.log("[LocalStorage] Progress loaded:",i),i}catch(t){return console.error("[LocalStorage] Error loading progress:",t),null}}async setComplete(){if(!this.initialized)throw new Error("Adapter not initialized");const t=await this.getProgress()||{};return t._completed=!0,t._completedAt=(new Date).toISOString(),await this.saveProgress(t),console.log("[LocalStorage] Course marked as complete"),!0}async setScore(t){if(!this.initialized)throw new Error("Adapter not initialized");const i=await this.getProgress()||{};return i._score=t,await this.saveProgress(i),console.log("[LocalStorage] Score set:",t),!0}async terminate(){return console.log("[LocalStorage] Terminating connection"),this.initialized=!1,!0}async setValue(t,i){if(!this.initialized)throw new Error("Adapter not initialized");try{return localStorage.setItem(`scorm_${t}`,i),!0}catch(t){return console.error("[LocalStorage] Error setting value:",t),!1}}async getValue(t){if(!this.initialized)throw new Error("Adapter not initialized");try{return localStorage.getItem(`scorm_${t}`)}catch(t){return console.error("[LocalStorage] Error getting value:",t),null}}}const n=new class{constructor(){this.adapter=null,this.environment=null,this.initialized=!1}async initialize(){if(this.initialized)return console.warn("[Wrapper] Already initialized"),!0;switch(this.environment=t.detect(),this.environment.type){case"scorm2004":this.adapter=new i(this.environment.api);break;case"scorm12":this.adapter=new e(this.environment.api);break;case"xapi":this.adapter=new r;break;default:this.adapter=new a}return"xapi"===this.environment.type?await this.adapter.initialize(this.environment.api):await this.adapter.initialize(),this.initialized=!0,this.setupAutoTerminate(),!0}async saveProgress(t){return this.ensureInitialized(),await this.adapter.saveProgress(t)}async getProgress(){return this.ensureInitialized(),await this.adapter.getProgress()}async setComplete(t=!0){return this.ensureInitialized(),await this.adapter.setComplete(t)}async setScore(t){if(this.ensureInitialized(),"number"!=typeof t||t<0||t>100)throw new Error("Score must be a number between 0 and 100");return await this.adapter.setScore(t)}async terminate(){if(!this.initialized)return!0;const t=await this.adapter.terminate();return this.initialized=!1,t}async setValue(t,i){return this.ensureInitialized(),this.adapter.setValue?await this.adapter.setValue(t,i):(console.warn("[Wrapper] setValue not supported by current adapter"),!1)}async getValue(t){return this.ensureInitialized(),this.adapter.getValue?await this.adapter.getValue(t):(console.warn("[Wrapper] getValue not supported by current adapter"),null)}async sendStatement(t){return this.ensureInitialized(),this.adapter.sendStatement?await this.adapter.sendStatement(t):(console.warn("[Wrapper] sendStatement only supported in xAPI environments"),!1)}getEnvironmentType(){return this.environment?.type||"unknown"}isInitialized(){return this.initialized}setupAutoTerminate(){window.addEventListener("pagehide",()=>{this.initialized&&this.terminate()}),window.addEventListener("beforeunload",()=>{this.initialized&&this.terminate()}),document.addEventListener("visibilitychange",()=>{"hidden"===document.visibilityState&&this.initialized&&this.terminate()}),window.addEventListener("unload",()=>{this.initialized&&this.terminate()})}ensureInitialized(){if(!this.initialized)throw new Error("Wrapper not initialized. Call initialize() first.")}};export{t as EnvironmentDetector,a as LocalStorageAdapter,e as SCORM12Adapter,i as SCORM2004Adapter,n as ScormWrapper,r as XAPIAdapter,n as default};
//# sourceMappingURL=scorm-wrapper.esm.js.map
