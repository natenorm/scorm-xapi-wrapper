class t{static detect(){const t=this.findSCORM2004API();if(t)return{type:"scorm2004",api:t};const e=this.findSCORM12API();if(e)return{type:"scorm12",api:e};const i=this.findXAPIConfig();return i?{type:"xapi",api:i}:{type:"local",api:null}}static findSCORM2004API(){let t=window,e=0;for(;t&&e<500;){if(e++,t.API_1484_11)return t.API_1484_11;if(!t.parent||t.parent===t)break;t=t.parent}return null}static findSCORM12API(){let t=window,e=0;for(;t&&e<500;){if(e++,t.API)return t.API;if(!t.parent||t.parent===t)break;t=t.parent}return null}static findXAPIConfig(){const t=new URLSearchParams(window.location.search),e=t.get("endpoint"),i=t.get("auth"),r=t.get("actor"),n=t.get("activity_id");return e?{endpoint:e,auth:i,actor:r?JSON.parse(decodeURIComponent(r)):null,activityId:n}:window.xAPIConfig?window.xAPIConfig:null}}class e{constructor(t){this.api=t,this.initialized=!1}async initialize(){try{if("true"===this.api.Initialize("")){this.initialized=!0,console.log("[SCORM 2004] Initialized successfully");const t=this.api.GetValue("cmi.completion_status");return"unknown"!==t&&"not attempted"!==t||(this.api.SetValue("cmi.completion_status","incomplete"),this.api.Commit("")),!0}throw new Error(this.getLastError())}catch(t){throw console.error("[SCORM 2004] Initialization error:",t),t}}async saveProgress(t){if(!this.initialized)throw new Error("SCORM API not initialized");try{const e=JSON.stringify(t);e.length>64e3&&console.warn("[SCORM 2004] Data exceeds 64KB limit, truncating..."),this.api.SetValue("cmi.suspend_data",e),void 0!==t.location&&this.api.SetValue("cmi.location",String(t.location));if("true"===this.api.Commit(""))return console.log("[SCORM 2004] Progress saved successfully"),!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error saving progress:",t),!1}}async getProgress(){if(!this.initialized)throw new Error("SCORM API not initialized");try{const t=this.api.GetValue("cmi.suspend_data");if(!t||""===t)return null;const e=JSON.parse(t);return console.log("[SCORM 2004] Progress loaded"),e}catch(t){return console.error("[SCORM 2004] Error loading progress:",t),null}}async setComplete(){if(!this.initialized)throw new Error("SCORM API not initialized");try{this.api.SetValue("cmi.completion_status","completed"),this.api.SetValue("cmi.success_status","passed");if("true"===this.api.Commit(""))return console.log("[SCORM 2004] Course marked as complete"),!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error setting completion:",t),!1}}async setScore(t){if(!this.initialized)throw new Error("SCORM API not initialized");try{const e=t/100;this.api.SetValue("cmi.score.scaled",String(e)),this.api.SetValue("cmi.score.raw",String(t)),this.api.SetValue("cmi.score.min","0"),this.api.SetValue("cmi.score.max","100");if("true"===this.api.Commit(""))return console.log("[SCORM 2004] Score set:",t),!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error setting score:",t),!1}}async terminate(){if(!this.initialized)return!0;try{if("true"===this.api.Terminate(""))return console.log("[SCORM 2004] Terminated successfully"),this.initialized=!1,!0;throw new Error(this.getLastError())}catch(t){return console.error("[SCORM 2004] Error terminating:",t),!1}}async setValue(t,e){if(!this.initialized)throw new Error("SCORM API not initialized");try{return this.api.SetValue(t,e),this.api.Commit(""),!0}catch(t){return console.error("[SCORM 2004] Error setting value:",t),!1}}async getValue(t){if(!this.initialized)throw new Error("SCORM API not initialized");try{return this.api.GetValue(t)}catch(t){return console.error("[SCORM 2004] Error getting value:",t),null}}getLastError(){const t=this.api.GetLastError();return`Error ${t}: ${this.api.GetErrorString(t)} - ${this.api.GetDiagnostic(t)}`}}class i{constructor(t){this.endpoint=t.endpoint,this.auth=t.auth,this.actor=t.actor,this.activityId=t.activityId||window.location.href,this.initialized=!1,this.registrationId=this.generateUUID()}async initialize(){try{return await this.sendStatement({verb:{id:"http://adlnet.gov/expapi/verbs/initialized",display:{"en-US":"initialized"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}}}),this.initialized=!0,console.log("[xAPI] Initialized successfully"),!0}catch(t){throw console.error("[xAPI] Initialization error:",t),t}}async saveProgress(t){if(!this.initialized)throw new Error("xAPI not initialized");try{const e=`${this.endpoint}/activities/state?activityId=${encodeURIComponent(this.activityId)}&agent=${encodeURIComponent(JSON.stringify(this.actor))}&stateId=progress&registration=${this.registrationId}`,i=await fetch(e,{method:"PUT",headers:{Authorization:this.auth,"Content-Type":"application/json","X-Experience-API-Version":"1.0.3"},body:JSON.stringify(t)});if(i.ok)return console.log("[xAPI] Progress saved successfully"),await this.sendStatement({verb:{id:"http://adlnet.gov/expapi/verbs/progressed",display:{"en-US":"progressed"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}}}),!0;throw new Error(`HTTP ${i.status}: ${i.statusText}`)}catch(t){return console.error("[xAPI] Error saving progress:",t),!1}}async getProgress(){if(!this.initialized)throw new Error("xAPI not initialized");try{const t=`${this.endpoint}/activities/state?activityId=${encodeURIComponent(this.activityId)}&agent=${encodeURIComponent(JSON.stringify(this.actor))}&stateId=progress&registration=${this.registrationId}`,e=await fetch(t,{method:"GET",headers:{Authorization:this.auth,"X-Experience-API-Version":"1.0.3"}});if(e.ok){const t=await e.json();return console.log("[xAPI] Progress loaded"),t}if(404===e.status)return null;throw new Error(`HTTP ${e.status}: ${e.statusText}`)}catch(t){return console.error("[xAPI] Error loading progress:",t),null}}async setComplete(){if(!this.initialized)throw new Error("xAPI not initialized");try{return await this.sendStatement({verb:{id:"http://adlnet.gov/expapi/verbs/completed",display:{"en-US":"completed"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}},result:{completion:!0,success:!0}}),console.log("[xAPI] Course marked as complete"),!0}catch(t){return console.error("[xAPI] Error setting completion:",t),!1}}async setScore(t){if(!this.initialized)throw new Error("xAPI not initialized");try{return await this.sendStatement({verb:{id:"http://adlnet.gov/expapi/verbs/scored",display:{"en-US":"scored"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}},result:{score:{scaled:t/100,raw:t,min:0,max:100}}}),console.log("[xAPI] Score set:",t),!0}catch(t){return console.error("[xAPI] Error setting score:",t),!1}}async terminate(){if(!this.initialized)return!0;try{return await this.sendStatement({verb:{id:"http://adlnet.gov/expapi/verbs/terminated",display:{"en-US":"terminated"}},object:{id:this.activityId,definition:{type:"http://adlnet.gov/expapi/activities/course"}}}),console.log("[xAPI] Terminated successfully"),this.initialized=!1,!0}catch(t){return console.error("[xAPI] Error terminating:",t),!1}}async sendStatement(t){const e={actor:this.actor,...t,timestamp:(new Date).toISOString(),context:{registration:this.registrationId}},i=await fetch(`${this.endpoint}/statements`,{method:"POST",headers:{Authorization:this.auth,"Content-Type":"application/json","X-Experience-API-Version":"1.0.3"},body:JSON.stringify(e)});if(!i.ok)throw new Error(`HTTP ${i.status}: ${i.statusText}`);return i}generateUUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})}}class r{constructor(){this.storageKey="scorm_local_data",this.initialized=!1}async initialize(){return console.log("[LocalStorage] Running in local development mode"),this.initialized=!0,!0}async saveProgress(t){if(!this.initialized)throw new Error("Adapter not initialized");try{const e=JSON.stringify(t);return localStorage.setItem(this.storageKey,e),console.log("[LocalStorage] Progress saved:",t),!0}catch(t){return console.error("[LocalStorage] Error saving progress:",t),!1}}async getProgress(){if(!this.initialized)throw new Error("Adapter not initialized");try{const t=localStorage.getItem(this.storageKey);if(!t)return null;const e=JSON.parse(t);return console.log("[LocalStorage] Progress loaded:",e),e}catch(t){return console.error("[LocalStorage] Error loading progress:",t),null}}async setComplete(){if(!this.initialized)throw new Error("Adapter not initialized");const t=await this.getProgress()||{};return t._completed=!0,t._completedAt=(new Date).toISOString(),await this.saveProgress(t),console.log("[LocalStorage] Course marked as complete"),!0}async setScore(t){if(!this.initialized)throw new Error("Adapter not initialized");const e=await this.getProgress()||{};return e._score=t,await this.saveProgress(e),console.log("[LocalStorage] Score set:",t),!0}async terminate(){return console.log("[LocalStorage] Terminating connection"),this.initialized=!1,!0}async setValue(t,e){if(!this.initialized)throw new Error("Adapter not initialized");try{return localStorage.setItem(`scorm_${t}`,e),!0}catch(t){return console.error("[LocalStorage] Error setting value:",t),!1}}async getValue(t){if(!this.initialized)throw new Error("Adapter not initialized");try{return localStorage.getItem(`scorm_${t}`)}catch(t){return console.error("[LocalStorage] Error getting value:",t),null}}}const n=new class{constructor(){this.adapter=null,this.environment=null,this.initialized=!1}async initialize(){if(this.initialized)return console.warn("[Wrapper] Already initialized"),!0;switch(this.environment=t.detect(),console.log(`[Wrapper] Detected environment: ${this.environment.type}`),this.environment.type){case"scorm2004":this.adapter=new e(this.environment.api);break;case"xapi":this.adapter=new i(this.environment.api);break;default:this.adapter=new r}return await this.adapter.initialize(),this.initialized=!0,this.setupAutoTerminate(),!0}async saveProgress(t){return this.ensureInitialized(),await this.adapter.saveProgress(t)}async getProgress(){return this.ensureInitialized(),await this.adapter.getProgress()}async setComplete(){return this.ensureInitialized(),await this.adapter.setComplete()}async setScore(t){if(this.ensureInitialized(),"number"!=typeof t||t<0||t>100)throw new Error("Score must be a number between 0 and 100");return await this.adapter.setScore(t)}async terminate(){if(!this.initialized)return!0;const t=await this.adapter.terminate();return this.initialized=!1,t}async setValue(t,e){return this.ensureInitialized(),this.adapter.setValue?await this.adapter.setValue(t,e):(console.warn("[Wrapper] setValue not supported by current adapter"),!1)}async getValue(t){return this.ensureInitialized(),this.adapter.getValue?await this.adapter.getValue(t):(console.warn("[Wrapper] getValue not supported by current adapter"),null)}getEnvironmentType(){return this.environment?.type||"unknown"}isInitialized(){return this.initialized}setupAutoTerminate(){window.addEventListener("beforeunload",()=>{this.initialized&&this.terminate()}),document.addEventListener("visibilitychange",()=>{"hidden"===document.visibilityState&&this.initialized&&this.terminate()})}ensureInitialized(){if(!this.initialized)throw new Error("Wrapper not initialized. Call initialize() first.")}};export{t as EnvironmentDetector,r as LocalStorageAdapter,e as SCORM2004Adapter,n as ScormWrapper,i as XAPIAdapter,n as default};
//# sourceMappingURL=scorm-wrapper.esm.js.map
